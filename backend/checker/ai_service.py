import logging
import os
import time
from textwrap import dedent

import httpx

from backend.courses.models import Task

from .models import Check

logger = logging.getLogger(__name__)
AI_API_KEY = os.getenv("AI_API_KEY")
AI_MODEL_NAME = os.getenv("AI_MODEL_NAME")


def _get_prompt_for_success(task_description: str, user_code: str) -> tuple[str, str]:
    system_prompt = "–¢—ã - —Ä–æ–±–æ—Ç, –ø—Ä–æ–≤–æ–¥—è—â–∏–π –∫–æ–¥-—Ä–µ–≤—å—é Python –∫–æ–¥–∞. –¢—ã –°–¢–†–û–ì–û —Å–ª–µ–¥—É–µ—à—å —Ñ–æ—Ä–º–∞—Ç—É. –¢—ã –ù–ï –î–û–ë–ê–í–õ–Ø–ï–®–¨ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤. –¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º."

    part_1 = dedent("""
        –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ö–û–î –∏ –û–ü–ò–°–ê–ù–ò–ï –ó–ê–î–ê–ß–ò –ö–û–¢–û–†–£–Æ –†–ï–®–ê–ï–¢ –ö–û–î –ø–æ—Å–ª–µ –¢–í–û–Ø –ó–ê–î–ê–ß–ê. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¢–û–õ–¨–ö–û –¢–í–û–ô –í–´–í–û–î –≤ —Ñ–æ—Ä–º–∞—Ç–µ MarkdownV2, —Ç–æ—á–Ω–æ —Å–ª–µ–¥—É—è –®–ê–ë–õ–û–ù–£ –í–´–í–û–î–ê –∏–∑ –ü–†–ò–ú–ï–†.
        –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, `.`, `!`, `-`, `(`, `)`) —Ç—ã –û–ë–Ø–ó–ê–ù —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–º —Å–ª—ç—à–µ–º `\` –ï–°–õ–ò –û–ù–ò –ù–ï –í –ë–õ–û–ö–ï –ö–û–î–ê.
        
        ---
        –ü–†–ò–ú–ï–† (–®–ê–ë–õ–û–ù –í–´–í–û–î–ê –î–û --- –ù–ï–í–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û):
        üëç **–û—Ç–ª–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!**
        –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã, –∏ –∑–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!

        üí° **–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?**
        –¢–≤–æ–π –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤. –≠—Ç–æ —Ä–∞–±–æ—á–∏–π –ø–æ–¥—Ö–æ–¥, –Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –±—É–¥–µ—Ç –º–∏–ª–ª–∏–æ–Ω —ç–ª–µ–º–µ–Ω—Ç–æ–≤! –ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—à–Ω–∏—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–π, –∏ –µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–π–º–µ—Ç –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.

        –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö `set` (–º–Ω–æ–∂–µ—Å—Ç–≤–æ), –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.

        –í–æ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:
        ```python
        def has_duplicates_optimized(nums):
            seen = set()
            for num in nums:
                if num in seen:
                    return True
                seen.add(num)
            return False
        ```

        ---
        
        –¢–í–û–Ø –ó–ê–î–ê–ß–ê:

        –ö–û–î:
        ```python
    """)

    part_2 = dedent("""
        ```
        
        –û–ü–ò–°–ê–ù–ò–ï –ó–ê–î–ê–ß–ò –ö–û–¢–û–†–£–Æ –†–ï–®–ê–ï–¢ –ö–û–î:
        ```python
    """)

    part_3 = dedent("""
        ```

        –¢–í–û–ô –í–´–í–û–î (–ò—Å–ø–æ–ª—å–∑—É–π –®–ê–ë–õ–û–ù –í–´–í–û–î–ê –∏–∑ –ü–†–ò–ú–ï–†):
    """)

    user_prompt = f"{part_1}\n{user_code}\n{part_2}\n{task_description}\n{part_3}"
    return system_prompt, user_prompt


def _get_prompt_for_runtime_error(
    user_code: str, error_traceback: str
) -> tuple[str, str]:
    system_prompt = "–¢—ã - —Ä–æ–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç Python –∫–æ–¥. –¢—ã –°–¢–†–û–ì–û —Å–ª–µ–¥—É–µ—à—å —Ñ–æ—Ä–º–∞—Ç—É. –¢—ã –ù–ï –î–û–ë–ê–í–õ–Ø–ï–®–¨ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤. –¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º."

    part_1 = dedent("""
        –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ö–û–î –∏ –û–®–ò–ë–ö–£ –ø–æ—Å–ª–µ –¢–í–û–Ø –ó–ê–î–ê–ß–ê. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¢–û–õ–¨–ö–û –¢–í–û–ô –í–´–í–û–î –≤ —Ñ–æ—Ä–º–∞—Ç–µ MarkdownV2, —Ç–æ—á–Ω–æ —Å–ª–µ–¥—É—è –®–ê–ë–õ–û–ù–£ –í–´–í–û–î–ê –∏–∑ –ü–†–ò–ú–ï–†.
            –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, `.`, `!`, `-`, `(`, `)`) —Ç—ã –û–ë–Ø–ó–ê–ù —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–º —Å–ª—ç—à–µ–º `\` –ï–°–õ–ò –û–ù–ò –ù–ï –í –ë–õ–û–ö–ï –ö–û–î–ê.
        
        ---
        –ü–†–ò–ú–ï–† (–®–ê–ë–õ–û–ù –í–´–í–û–î–ê –î–û --- –ù–ï–í–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û):
        üßê **–í —á–µ–º –ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏?**
        –û—à–∏–±–∫–∞ `ZeroDivisionError` –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –∫–æ–≥–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å —á–∏—Å–ª–æ –Ω–∞ –Ω–æ–ª—å, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π. –í –≤–∞—à–µ–º –∫–æ–¥–µ, –≤ —Å—Ç—Ä–æ–∫–µ `print(a / b)`, –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è `b` —Ä–∞–≤–Ω–∞ –Ω—É–ª—é.

        ‚úÖ **–ö–∞–∫ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?**
        –ü–µ—Ä–µ–¥ –¥–µ–ª–µ–Ω–∏–µ–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —Ä–∞–≤–µ–Ω –ª–∏ –¥–µ–ª–∏—Ç–µ–ª—å (`b`) –Ω—É–ª—é.

        –í–æ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥:
        ```python
        a = 10
        b = 0
        if b != 0:
            print(a / b)
        else:
            print("–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!")
        ```

        ---
        
        –¢–í–û–Ø –ó–ê–î–ê–ß–ê:

        –ö–û–î:
        ```python
    """)

    part_2 = dedent("""
        ```
        
        –û–®–ò–ë–ö–ê:
        ```python
    """)

    part_3 = dedent("""
        ```

        –¢–í–û–ô –í–´–í–û–î (–ò—Å–ø–æ–ª—å–∑—É–π –®–ê–ë–õ–û–ù –í–´–í–û–î–ê –∏–∑ –ü–†–ò–ú–ï–†):
    """)

    user_prompt = f"{part_1}\n{user_code}\n{part_2}\n{error_traceback}\n{part_3}"
    return system_prompt, user_prompt


def _get_prompt_for_wrong_answer(
    task_description: str, user_code: str, test_input: str, expected: str, actual: str
) -> str:
    system_prompt = "–¢—ã - —É–º–Ω—ã–π –æ—Ç–ª–∞–¥—á–∏–∫ –∫–æ–¥–∞ –Ω–∞ Python. –¢—ã –°–¢–†–û–ì–û —Å–ª–µ–¥—É–µ—à—å —Ñ–æ—Ä–º–∞—Ç—É. –¢—ã –ù–ï –î–û–ë–ê–í–Ø–ï–®–¨ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤. –¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º."

    part_1 = dedent("""
        –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ö–û–î –∏ –û–ü–ò–°–ê–ù–ò–ï –ó–ê–î–ê–ß–ò –ö–û–¢–û–†–£–Æ –î–û–õ–ñ–ï–ù –†–ï–®–ê–¢–¨ –ö–û–î –∏ –î–ï–¢–ê–õ–ò –ü–†–û–í–ê–õ–ï–ù–ù–û–ì–û –¢–ï–°–¢–ê –ø–æ—Å–ª–µ –¢–í–û–Ø –ó–ê–î–ê–ß–ê. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¢–û–õ–¨–ö–û –¢–í–û–ô –í–´–í–û–î –≤ —Ñ–æ—Ä–º–∞—Ç–µ MarkdownV2, —Ç–æ—á–Ω–æ —Å–ª–µ–¥—É—è –®–ê–ë–õ–û–ù–£ –í–´–í–û–î–ê –∏–∑ –ü–†–ò–ú–ï–†.
        –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, `.`, `!`, `-`, `(`, `)`) —Ç—ã –û–ë–Ø–ó–ê–ù —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–º —Å–ª—ç—à–µ–º `\` –ï–°–õ–ò –û–ù–ò –ù–ï –í –ë–õ–û–ö–ï –ö–û–î–ê.
        
        ---
        –ü–†–ò–ú–ï–† (–®–ê–ë–õ–û–ù –í–´–í–û–î–ê –î–û --- –ù–ï–í–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù):
        ü§î **–í —á–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞?**
        –¢–≤–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º `s == s[::-1]` –Ω–∞–ø—Ä—è–º—É—é —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É `–ê —Ä–æ–∑–∞ —É–ø–∞–ª–∞ –Ω–∞ –ª–∞–ø—É –ê–∑–æ—Ä–∞` —Å –µ—ë –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–π –≤–µ—Ä—Å–∏–µ–π, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ `–∞–∑–æ—Ä–ê —É–ø–∞–ª –∞–Ω –∞–ª–∞–ø—É –∞–∑–æ—Ä –ê`. –ò–∑-–∑–∞ —Ä–∞–∑–Ω–∏—Ü—ã –≤ —Ä–µ–≥–∏—Å—Ç—Ä–µ (`–ê` vs `–∞`) –∏ –ø—Ä–æ–±–µ–ª–æ–≤, –æ–Ω–∏ –Ω–µ —Ä–∞–≤–Ω—ã, –∏ –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `False`.
        
        üéØ **–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è**
        –ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å –µ—ë –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–π –∫–æ–ø–∏–µ–π, –µ—ë –Ω—É–∂–Ω–æ "–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å".

        –ü–æ–¥—É–º–∞–π, –∫–∞–∫–∏–µ –¥–≤–∞ –º–µ—Ç–æ–¥–∞ –¥–ª—è —Å—Ç—Ä–æ–∫ –≤ Python –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ:
        1.  –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤—Å–µ –±—É–∫–≤—ã –≤ —Å—Ç—Ä–æ—á–Ω—ã–µ?
        2.  –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏?

        –ü—Ä–∏–º–µ–Ω–∏ –∏—Ö –∫ —Å—Ç—Ä–æ–∫–µ `s` **–ø–µ—Ä–µ–¥** —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º, –∏ –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!

        ---
        
        –¢–í–û–Ø –ó–ê–î–ê–ß–ê:

        –ö–û–î:
        ```python
    """)

    part_2 = dedent("""
        ```
        
        –û–ü–ò–°–ê–ù–ò–ï –ó–ê–î–ê–ß–ò –ö–û–¢–û–†–£–Æ –î–û–õ–ñ–ï–ù –†–ï–®–ê–¢–¨ –ö–û–î:
        ```python
    """)

    part_3 = dedent(f"""
        ```
        –î–ï–¢–ê–õ–ò –ü–†–û–í–ê–õ–ï–ù–ù–û–ì–û –¢–ï–°–¢–ê:
        - –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (`input`): `{test_input}`
        - –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (`expected`): `{expected}`
        - –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–ª –∫–æ–¥ (`actual`):
        ```
    """)

    part_4 = dedent("""
        ```

        –¢–í–û–ô –í–´–í–û–î (–ò—Å–ø–æ–ª—å–∑—É–π –®–ê–ë–õ–û–ù –í–´–í–û–î–ê –∏–∑ –ü–†–ò–ú–ï–†):
    """)

    user_prompt = f"{part_1}\n{user_code}\n{part_2}\n{task_description}\n{part_3}\n{actual}\n{part_4}"

    return system_prompt, user_prompt


async def _call_ai_api(
    user_prompt: str, system_prompt: str = "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –ø–æ –∫–æ–¥—É."
) -> tuple[str, int]:
    api_url = "https://api.groq.com/openai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {AI_API_KEY}",
        "Content-Type": "application/json",
    }
    payload = {
        "model": AI_MODEL_NAME,
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ],
        "temperature": 0.2,
        "max_tokens": 1500,
    }
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ {AI_MODEL_NAME}...")
    start_time = time.monotonic()
    ai_response = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI."
    try:
        async with httpx.AsyncClient(timeout=120.0) as client:
            response = await client.post(api_url, json=payload, headers=headers)
            response.raise_for_status()
            data = response.json()
            ai_response = data["choices"][0]["message"]["content"].strip()
    except httpx.RequestError as e:
        logger.error(f"AI request failed: {e}")
        ai_response = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º AI."
    except (KeyError, IndexError) as e:
        logger.error(f"Failed to parse AI response: {e}. Response data: {data}")
        ai_response = "–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ AI."
    end_time = time.monotonic()
    duration_ms = int((end_time - start_time) * 1000)
    return ai_response, duration_ms


async def get_ai_suggestion(check: Check, task: Task) -> tuple[str, int]:
    system_prompt, user_prompt = "", ""
    if check.status == Check.Status.SUCCESS:
        system_prompt, user_prompt = _get_prompt_for_success(
            task.description, check.code
        )

    elif check.status == Check.Status.ERROR:
        if check.stderr:
            system_prompt, user_prompt = _get_prompt_for_runtime_error(
                check.code, check.stderr
            )
        elif check.error_context:
            context = check.error_context
            system_prompt, user_prompt = _get_prompt_for_wrong_answer(
                task.description,
                check.code,
                context.get("input", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                context.get("expected", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                check.stdout,
            )

    if not user_prompt:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", 0

    return await _call_ai_api(user_prompt=user_prompt, system_prompt=system_prompt)
