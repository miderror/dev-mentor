import logging
import os
import re
import time
from textwrap import dedent

import httpx
from aiogram import Bot
from aiogram.enums import ParseMode
from asgiref.sync import sync_to_async
from celery import shared_task
from django.conf import settings
from django.db import models
from django.utils import timezone

from backend.users.models import User
from bot.keyboards.inline_keyboards import get_after_check_kb

from .models import Check, CommonError
from .runner import execute_code

logger = logging.getLogger(__name__)
OLLAMA_HOST = os.getenv("OLLAMA_HOST", "http://ollama:11434")


async def get_ai_suggestion(error_traceback: str) -> str:
    system_prompt = (
        "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö Python-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∏ –¥–∞–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å—Ç—Ä–æ–≥–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏ —à–∞–±–ª–æ–Ω–µ. "
        "–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π, –∑–∞–∫–ª—é—á–µ–Ω–∏–π –∏–ª–∏ –ª–∏—à–Ω–∏—Ö —Ñ—Ä–∞–∑. "
        "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–≤–∞ –±–ª–æ–∫–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π (—à–∞–±–ª–æ–Ω)."
    )

    header = dedent("""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –æ—à–∏–±–∫—É –≤ Python –∫–æ–¥–µ. –î–∞–π –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MarkdownV2, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è –∑–∞–≥–æ–ª–æ–≤–∫–∏ (#).

        –í–æ—Ç —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
        ```python
    """)

    footer = dedent("""
        ```

        –í–æ—Ç —à–∞–±–ª–æ–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å—Ç—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç (—à–∞–±–ª–æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ ```, –≥–¥–µ –≤–º–µ—Å—Ç–æ –≤—Å–µ—Ö [] –ø–æ–¥—Å—Ç–∞–≤—å –Ω—É–∂–Ω—ã–π –æ—Ç–≤–µ—Ç):
        ```
        üßê **–í —á–µ–º –ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏?**
        [–ó–¥–µ—Å—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞ –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤ –∫–æ–¥–µ]

        ‚úÖ **–ö–∞–∫ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?**
        [–ó–¥–µ—Å—å –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –∏–ª–∏ —à–∞–≥–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è]
        ```
    """)

    user_prompt = f"{header}\n{error_traceback}\n{footer}"
    
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ AI —Å –æ—à–∏–±–∫–æ–π: {error_traceback[:100]}...")
    start_time = time.monotonic()
    try:
        async with httpx.AsyncClient(timeout=600.0) as client:
            response = await client.post(
                f"{OLLAMA_HOST}/api/generate",
                json={
                    "model": "codellama:7b-instruct",
                    "system": system_prompt,
                    "prompt": user_prompt,
                    "stream": False,
                    "options": {
                        "temperature": 0.2,
                    },
                },
            )
            response.raise_for_status()
            data = response.json()
            ai_response = data.get(
                "response", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI."
            ).strip()
    except httpx.RequestError as e:
        logger.error(f"AI request failed: {e}")
        ai_response = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–∫–∏."

    end_time = time.monotonic()
    duration_ms = int((end_time - start_time) * 1000)

    return ai_response, duration_ms


async def find_common_error(stderr: str) -> CommonError | None:
    common_errors = await sync_to_async(list)(CommonError.objects.all())
    for error in common_errors:
        if re.search(error.error_pattern, stderr, re.DOTALL):
            return error
    return None


@shared_task
def check_code_task(user_id: int, code: str):
    import asyncio

    asyncio.run(check_code_async(user_id, code))


async def check_code_async(user_id: int, code: str, language: str = "python"):
    bot = Bot(token=settings.BOT_TOKEN, default=None)
    check_instance = None
    try:
        user = await User.objects.aget(telegram_id=user_id)
        check_instance = await Check.objects.acreate(
            user=user, code=code, status=Check.Status.RUNNING
        )

        result = await sync_to_async(execute_code)(code, language)

        update_fields = {
            "checks_count": models.F("checks_count") + 1,
            "last_activity_at": timezone.now(),
        }

        if result["exit_code"] == 0 and not result["stderr"]:
            check_instance.status = Check.Status.SUCCESS
            check_instance.stdout = result["stdout"]

            update_fields["successful_checks_count"] = (
                models.F("successful_checks_count") + 1
            )

            response_text = "‚úÖ **–í–∞—à –∫–æ–¥ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ\\!**"
        else:
            if result["timeout"]:
                check_instance.status = Check.Status.TIMEOUT
            else:
                check_instance.status = Check.Status.ERROR

            check_instance.stderr = result["stderr"]

            update_fields["failed_checks_count"] = models.F("failed_checks_count") + 1

            common_error = await find_common_error(result["stderr"])

            explanation = ""
            ai_time_ms = None
            if common_error:
                explanation = f"üßê **–í —á–µ–º –ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏?**\n{common_error.title}\n\n‚úÖ **–ö–∞–∫ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?**\n{common_error.description}"
            else:
                explanation, ai_time_ms = await get_ai_suggestion(result["stderr"])
                check_instance.ai_response_ms = ai_time_ms

            check_instance.ai_suggestion = explanation
            sanitized_stderr = result["stderr"][:1000].replace("```", "``\u200b`")
            translation_dict = {
                "[": r"\[",
                "]": r"\]",
                "(": r"\(",
                ")": r"\)",
                "~": r"\~",
                ">": r"\>",
                "#": r"\#",
                "+": r"\+",
                "=": r"\=",
                "-": r"\-",
                "|": r"\|",
                "{": r"\{",
                "}": r"\}",
                ".": r"\.",
                "!": r"\!",
            }

            translation_table = str.maketrans(translation_dict)
            sanitized_explanation = explanation.translate(translation_table)

            response_text = (
                "‚ùå **–í –≤–∞—à–µ–º –∫–æ–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\!**\n\n"
                f"**–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:**\n```\n{sanitized_stderr}\n```\n\n"
                f"**–ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ—à–µ–Ω–∏–µ:**\n{sanitized_explanation}"
            )

        await sync_to_async(User.objects.filter(telegram_id=user_id).update)(
            **update_fields
        )
        await check_instance.asave()
        await bot.send_message(
            user_id,
            response_text,
            parse_mode=ParseMode.MARKDOWN_V2,
            reply_markup=get_after_check_kb(),
        )

    except Exception as e:
        logger.exception(f"Critical error in check_code_task for user {user_id}: {e}")
        if check_instance:
            check_instance.status = Check.Status.ERROR
            check_instance.stderr = f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}"
            await check_instance.asave()

        await bot.send_message(
            user_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º.",
        )

    finally:
        await bot.session.close()
