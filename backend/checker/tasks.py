import logging
import os
import re
import time
from textwrap import dedent

import httpx
from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from asgiref.sync import sync_to_async
from celery import shared_task
from django.conf import settings
from django.db import models
from django.utils import timezone

from backend.users.models import User
from bot.keyboards.inline_keyboards import get_after_check_kb

from .models import Check, CommonError
from .runner import execute_code

logger = logging.getLogger(__name__)
AI_API_KEY = os.getenv("AI_API_KEY")
AI_MODEL_NAME = os.getenv("AI_MODEL_NAME")


async def get_ai_suggestion(user_code: str, error_traceback: str) -> str:
    system_prompt = "–¢—ã - —Ä–æ–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç Python –∫–æ–¥. –¢—ã –°–¢–†–û–ì–û —Å–ª–µ–¥—É–µ—à—å —Ñ–æ—Ä–º–∞—Ç—É. –¢—ã –ù–ï –¥–æ–±–∞–≤–ª—è–µ—à—å –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤. –¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º."

    part_1 = dedent("""
        –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ö–û–î –∏ –û–®–ò–ë–ö–£ –ø–æ—Å–ª–µ –¢–í–û–Ø –ó–ê–î–ê–ß–ê. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¢–û–õ–¨–ö–û –¢–í–û–ô –í–´–í–û–î –≤ —Ñ–æ—Ä–º–∞—Ç–µ MarkdownV2, —Ç–æ—á–Ω–æ —Å–ª–µ–¥—É—è –®–ê–ë–õ–û–ù–£ –í–´–í–û–î–ê –∏–∑ –ü–†–ò–ú–ï–†.
        
        ---
        –ü–†–ò–ú–ï–† (–®–ê–ë–õ–û–ù –í–´–í–û–î–ê –î–û ---):
        üßê **–í —á–µ–º –ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏?**
        –û—à–∏–±–∫–∞ `ZeroDivisionError` –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –∫–æ–≥–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å —á–∏—Å–ª–æ –Ω–∞ –Ω–æ–ª—å, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π. –í –≤–∞—à–µ–º –∫–æ–¥–µ, –≤ —Å—Ç—Ä–æ–∫–µ `print(a / b)`, –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è `b` —Ä–∞–≤–Ω–∞ –Ω—É–ª—é.

        ‚úÖ **–ö–∞–∫ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?**
        –ü–µ—Ä–µ–¥ –¥–µ–ª–µ–Ω–∏–µ–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —Ä–∞–≤–µ–Ω –ª–∏ –¥–µ–ª–∏—Ç–µ–ª—å (`b`) –Ω—É–ª—é.

        –í–æ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥:
        ```python
        a = 10
        b = 0
        if b != 0:
            print(a / b)
        else:
            print("–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!")
        ```

        ---
        
        –¢–í–û–Ø –ó–ê–î–ê–ß–ê:

        –ö–û–î:
        ```python
    """)

    part_2 = dedent("""
        ```
        
        –û–®–ò–ë–ö–ê:
        ```python
    """)

    part_3 = dedent("""
        ```

        –¢–í–û–ô –í–´–í–û–î (–ò—Å–ø–æ–ª—å–∑—É–π –®–ê–ë–õ–û–ù –í–´–í–û–î–ê –∏–∑ –ü–†–ò–ú–ï–†):
    """)

    user_prompt = f"{part_1}\n{user_code}\n{part_2}\n{error_traceback}\n{part_3}"

    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ AI —Å –æ—à–∏–±–∫–æ–π: {error_traceback[:100]}...")

    api_url = "https://api.groq.com/openai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {AI_API_KEY}",
        "Content-Type": "application/json",
    }
    payload = {
        "model": AI_MODEL_NAME,
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ],
        "temperature": 0.1,
        "max_tokens": 1024,
    }

    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ {AI_MODEL_NAME}...")
    start_time = time.monotonic()
    ai_response = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI."

    try:
        async with httpx.AsyncClient(timeout=120.0) as client:
            response = await client.post(api_url, json=payload, headers=headers)
            response.raise_for_status()
            data = response.json()

            ai_response = data["choices"][0]["message"]["content"].strip()

    except httpx.RequestError as e:
        logger.error(f"AI request failed: {e}")
        ai_response = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–∫–∏."
    except (KeyError, IndexError) as e:
        logger.error(f"Failed to parse AI response: {e}. Response data: {data}")
        ai_response = "–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ AI."

    end_time = time.monotonic()
    duration_ms = int((end_time - start_time) * 1000)

    if ai_response.startswith("```markdown"):
        ai_response = ai_response[11:]
    if ai_response.startswith("```"):
        ai_response = ai_response[3:]
    if ai_response.endswith("```"):
        ai_response = ai_response[:-3]

    return ai_response.strip(), duration_ms


async def find_common_error(stderr: str) -> CommonError | None:
    common_errors = await sync_to_async(list)(CommonError.objects.all())
    for error in common_errors:
        if re.search(error.error_pattern, stderr, re.DOTALL):
            return error
    return None


@shared_task
def check_code_task(user_id: int, code: str):
    import asyncio

    asyncio.run(check_code_async(user_id, code))


async def check_code_async(user_id: int, code: str, language: str = "python"):
    bot = Bot(token=settings.BOT_TOKEN, default=None)
    check_instance = None
    try:
        user = await User.objects.aget(telegram_id=user_id)
        check_instance = await Check.objects.acreate(
            user=user, code=code, status=Check.Status.RUNNING
        )

        result = await sync_to_async(execute_code)(code, language)

        update_fields = {
            "checks_count": models.F("checks_count") + 1,
            "last_activity_at": timezone.now(),
        }

        if result["exit_code"] == 0 and not result["stderr"]:
            check_instance.status = Check.Status.SUCCESS
            check_instance.stdout = result["stdout"]

            update_fields["successful_checks_count"] = (
                models.F("successful_checks_count") + 1
            )

            response_text = "‚úÖ **–í–∞—à –∫–æ–¥ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ\\!**"
        else:
            if result["timeout"]:
                check_instance.status = Check.Status.TIMEOUT
            else:
                check_instance.status = Check.Status.ERROR

            check_instance.stderr = result["stderr"]

            update_fields["failed_checks_count"] = models.F("failed_checks_count") + 1

            common_error = await find_common_error(result["stderr"])

            explanation = ""
            ai_time_ms = None
            if common_error:
                explanation = f"üßê **–í —á–µ–º –ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏?**\n{common_error.title}\n\n‚úÖ **–ö–∞–∫ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?**\n{common_error.description}"
            else:
                explanation, ai_time_ms = await get_ai_suggestion(
                    code[:2000], result["stderr"]
                )
                check_instance.ai_response_ms = ai_time_ms

            check_instance.ai_suggestion = explanation
            sanitized_stderr = result["stderr"][:1000].replace("```", "``\u200b`")
            translation_dict = {
                "[": r"\[",
                "]": r"\]",
                "(": r"\(",
                ")": r"\)",
                "~": r"\~",
                ">": r"\>",
                "#": r"\#",
                "+": r"\+",
                "=": r"\=",
                "-": r"\-",
                "|": r"\|",
                "{": r"\{",
                "}": r"\}",
                ".": r"\.",
                "!": r"\!",
            }

            translation_table = str.maketrans(translation_dict)
            sanitized_explanation = explanation.translate(translation_table)
            if sanitized_explanation.count("```") % 2 != 0:
                sanitized_explanation += "\n```"

            response_text = (
                "‚ùå **–í –≤–∞—à–µ–º –∫–æ–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\!**\n\n"
                f"**–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:**\n```\n{sanitized_stderr}\n```\n\n"
                f"**–ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ—à–µ–Ω–∏–µ:**\n{sanitized_explanation}"
            )

        await sync_to_async(User.objects.filter(telegram_id=user_id).update)(
            **update_fields
        )
        await check_instance.asave()
        try:
            await bot.send_message(
                user_id,
                response_text,
                parse_mode=ParseMode.MARKDOWN_V2,
                reply_markup=get_after_check_kb(),
            )
        except TelegramBadRequest as e:
            logger.warning(
                f"Failed to send formatted message, sending plain text. Error: {e}"
            )
            sanitized_stderr = re.sub(r"[`*_\[\]()~>#\+\-=|{}.!]", "", sanitized_stderr)
            sanitized_explanation = re.sub(
                r"[`*_\[\]()~>#\+\-=|{}.!]", "", sanitized_explanation
            )
            response_text = (
                "‚ùå **–í –≤–∞—à–µ–º –∫–æ–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\!**\n\n"
                f"**–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:**\n```\n{sanitized_stderr}\n```\n\n"
                f"**–ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ—à–µ–Ω–∏–µ:**\n{sanitized_explanation}"
            )
            await bot.send_message(
                user_id,
                response_text,
                reply_markup=get_after_check_kb(),
            )

    except Exception as e:
        logger.exception(f"Critical error in check_code_task for user {user_id}: {e}")
        if check_instance:
            check_instance.status = Check.Status.ERROR
            check_instance.stderr = f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}"
            await check_instance.asave()

        await bot.send_message(
            user_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º.",
        )

    finally:
        await bot.session.close()
